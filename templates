<!-- templates/index.html -->

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conversor YouTube para MP3</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f4f4f9;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            text-align: center;
            width: 90%;
            max-width: 500px;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
        }
        input[type="text"] {
            width: calc(100% - 22px);
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            margin-bottom: 20px;
        }
        .btn {
            background-color: #ff0000;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        .btn:hover {
            background-color: #cc0000;
        }
        .cancel-btn {
            background-color: #6c757d;
            margin-left: 10px;
        }
        .cancel-btn:hover {
            background-color: #5a6268;
        }
        .btn:disabled {
            background-color: #aaa;
            cursor: not-allowed;
        }
        .download-area {
            margin-top: 30px;
        }
        .download-btn {
            background-color: #28a745;
            text-decoration: none;
        }
        .download-btn:hover {
            background-color: #218838;
        }
        .hidden {
            display: none;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #ff0000;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 10px auto;
        }
        .progress-container {
            width: 100%;
            background-color: #e0e0e0;
            border-radius: 5px;
            margin: 20px 0;
        }
        .progress-bar {
            width: 0%;
            height: 20px;
            background-color: #ff0000;
            border-radius: 5px;
            text-align: center;
            line-height: 20px;
            color: white;
            transition: width 0.4s ease;
        }
        .video-info {
            margin-top: 30px;
        }
        .video-info img {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 15px;
        }
        .video-info h2 {
            font-size: 18px;
            color: #333;
            margin: 0;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Conversor YouTube para MP3</h1>
        <p>Cole o link do vídeo do YouTube abaixo e clique em converter.</p>
        
        <input type="text" id="youtube-url" placeholder="https://www.youtube.com/watch?v=...">
        <button id="convert-btn" class="btn">Converter</button>
        <button id="cancel-btn" class="btn cancel-btn hidden">Cancelar</button>

        <div id="video-info" class="video-info hidden">
            <img id="video-thumbnail" src="" alt="Miniatura do vídeo">
            <h2 id="video-title"></h2>
        </div>

        <div id="progress-container" class="progress-container hidden">
            <div id="progress-bar" class="progress-bar">0%</div>
        </div>


        <div id="loader" class="loader hidden"></div>
        <div id="message-area"></div>

        <div id="download-area" class="download-area hidden">
            <p id="download-message">Seu MP3 está pronto!</p>
            <a id="download-link" class="btn download-btn" href="#" download>Baixar MP3</a>
        </div>
    </div>

    <script>
        const convertBtn = document.getElementById('convert-btn');
        const cancelBtn = document.getElementById('cancel-btn');
        const urlInput = document.getElementById('youtube-url');
        const loader = document.getElementById('loader');
        const messageArea = document.getElementById('message-area');
        const downloadArea = document.getElementById('download-area');
        const downloadLink = document.getElementById('download-link');
        const downloadMessage = document.getElementById('download-message');
        const progressContainer = document.getElementById('progress-container');
        const progressBar = document.getElementById('progress-bar');
        const videoInfoDiv = document.getElementById('video-info');
        const videoThumbnail = document.getElementById('video-thumbnail');
        const videoTitle = document.getElementById('video-title');
        let currentTaskId = null;
        let eventSource;

        convertBtn.addEventListener('click', async () => {
            const videoURL = urlInput.value.trim();
            if (!videoURL) {
                messageArea.textContent = 'Por favor, insira uma URL válida.';
                return;
            }

            if (eventSource) {
                eventSource.close();
            }

            // Reset UI
            convertBtn.disabled = true;
            cancelBtn.classList.add('hidden');
            loader.classList.remove('hidden');
            messageArea.textContent = 'Iniciando conversão...';
            downloadArea.classList.add('hidden');
            videoInfoDiv.classList.add('hidden');
            progressContainer.classList.add('hidden');
            progressBar.style.width = '0%';
            progressBar.textContent = '0%';
            
            try {
                const response = await fetch('/convert', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ url: videoURL }),
                });

                const data = await response.json();

                if (response.ok && data.task_id) {
                    currentTaskId = data.task_id;
                    cancelBtn.classList.remove('hidden');
                    loader.classList.add('hidden');
                    
                    // Exibe a miniatura e o título
                    videoThumbnail.src = data.thumbnail;
                    videoTitle.textContent = data.title;
                    videoInfoDiv.classList.remove('hidden');

                    progressContainer.classList.remove('hidden');
                    messageArea.textContent = 'Download em andamento...';
                    // Conecta ao endpoint de progresso
                    eventSource = new EventSource(`/progress/${data.task_id}`);

                    eventSource.onmessage = function(event) {
                        try {
                            // Tenta parsear como JSON (para o evento final)
                            const finalData = JSON.parse(event.data);
                            if (finalData.status === 'finished') {
                                progressBar.style.width = '100%';
                                progressBar.textContent = '100%';
                                messageArea.textContent = '';
                                
                                downloadLink.href = `/download/${finalData.filename}`;
                                downloadLink.download = finalData.filename;
                                downloadMessage.textContent = `Download concluído!`;
                                downloadArea.classList.remove('hidden');
                                eventSource.close();
                                convertBtn.disabled = false;
                                cancelBtn.classList.add('hidden');
                            } else if (finalData.status === 'error') {
                                messageArea.textContent = `Erro: Ocorreu um problema na conversão.`;
                                eventSource.close();
                                convertBtn.disabled = false;
                                cancelBtn.classList.add('hidden');
                            } else if (finalData.status === 'cancelled') {
                                messageArea.textContent = 'Download cancelado pelo usuário.';
                                progressContainer.classList.add('hidden');
                                eventSource.close();
                                convertBtn.disabled = false;
                                cancelBtn.classList.add('hidden');
                            }
                        } catch (e) {
                            // Se não for JSON, é uma atualização de progresso (número)
                            const progress = parseInt(event.data, 10);
                            progressBar.style.width = progress + '%';
                            progressBar.textContent = progress + '%';
                        }
                    };

                    eventSource.onerror = function() {
                        messageArea.textContent = 'Erro de conexão com o servidor para atualizações de progresso.';
                        eventSource.close();
                        convertBtn.disabled = false;
                        progressContainer.classList.add('hidden');
                        cancelBtn.classList.add('hidden');
                    };

                } else {
                    messageArea.textContent = `Erro: ${data.error || 'Ocorreu um problema.'}`;
                    convertBtn.disabled = false;
                    loader.classList.add('hidden');
                    cancelBtn.classList.add('hidden');
                }

            } catch (error) {
                // Lidar com erros de fetch, etc.
            }
        });

        cancelBtn.addEventListener('click', async () => {
            if (!currentTaskId) return;

            cancelBtn.disabled = true;
            messageArea.textContent = 'Cancelando...';

            await fetch(`/cancel/${currentTaskId}`, {
                method: 'POST'
            });
            
            // O eventSource cuidará de atualizar a UI para o estado final "cancelled"
            cancelBtn.disabled = false;
        });
    </script>

</body>
</html>
